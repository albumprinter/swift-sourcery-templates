<%_
func extractAnnotations(_ type: Type, annotationNames: [String]) -> [String] {
  let annotations = annotationNames.flatMap { _extractAnnotations(type, annotationName: $0) }
  return removeDuplicates(annotations).sorted()
}
func extractAnnotations(_ type: Type, annotationName: String) -> [String] {
  return removeDuplicates(_extractAnnotations(type, annotationName: annotationName)).sorted()
}
func _extractAnnotations(_ type: Type, annotationName: String) -> [String] {
  if let annotations = type.annotations[annotationName] as? [String] {
    return annotations.flatMap { splitAndTrim($0) }
  } else if let annotations = type.annotations[annotationName] as? String {
    return splitAndTrim(annotations)
  } else {
    return []
  }
}


// MARKL: - low-level utility methods

func trimmingWhitespace(_ string: String) -> String {
  return string.trimmingCharacters(in: .whitespacesAndNewlines)
}

func splitAndTrim(_ string: String, separator: Character = ",") -> [String] {
  return string.split(separator: separator).map { String($0) }.map { trimmingWhitespace($0) }
}

func removeDuplicates<T: Hashable>(_ array: [T]) -> [T] {
  return Array(Set(array))
}

-%>
